package com.digitalbank.shan.accountserver;

import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;
import javax.ws.rs.PathParam;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.digitalbank.shan.accountserver.model.Account;
import com.digitalbank.shan.accountserver.service.AccountService;
import com.digitalbank.shan.customerserver.model.Customer;

@RestController
@RequestMapping("/api/1.0")
public class AccountController {

	@Autowired
	private AccountService accountService;
	
	@GetMapping("/accounts")
	public List<Account> getAllAccounts(){
		return accountService.getAllAccounts();
	}
	
	@GetMapping("/accounts/{accountId}")
	public Account getAccountById(@PathParam("accountId") final Long accountId) {
		return accountService.getAccountByAccountId();
	}
	
	@GetMapping("/customers/{customerId}/accounts")
	public List<Account> getAccountsByCustomerId(@PathParam("customerId") final Long customerId){
		return accountService.getAccountsByCustomerId(customerId);
		//return getAllAccounts().stream().filter(account -> account.getCustomerId().equals(customerId)).collect(Collectors.toList());
	}
	
	@PostMapping("/customers")
	public ResponseEntity<Customer> addCustomer(@RequestBody final @Valid Customer customer,
			BindingResult bindingResult) {
		if(bindingResult.hasErrors()) {
			return new ResponseEntity<Customer>(HttpStatus.BAD_REQUEST); 
		}else {
			return customerService.addCustomer(customer);
		}
		
	}
	
	@PutMapping("/customers/{customerId}")
	public ResponseEntity<Customer> updateCustomer(@RequestBody final @Valid Customer customer,
			BindingResult bindingResult){
		if(bindingResult.hasErrors()) {
			return new ResponseEntity<Customer>(HttpStatus.BAD_REQUEST); 
		}else {
			if(isActiveCustomer(customer.getCustomerId())) {
				return customerService.addCustomer(customer);
			}else {
				return new ResponseEntity<Customer>(HttpStatus.NOT_MODIFIED);
			}
		}
	}
	
}
